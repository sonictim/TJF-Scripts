--@description TJF Chunk Editor
--@version 2.1
--@author Tim Farrell
--@link http://github.com/sonictim/TJF-Scripts/raw/master/index.xml
--
--@about
--  # TJF Chunk Editor
--  Based on EUGENE277771 Chunk Editor
--  Used Lokasenna GUI 2 Text Editor to add functionality of Copy/Paste/Undo
--  TRACK choses first selected Track
--  ITEM chooses first selected Item
--  ENVELOPE chooses selected envelope
--
--  GUI Script generated by Lokasenna's GUI Builder
--  REQUIRES Lokasenna GUI 2 Library
--
--  USE AT YOUR OWN RISK!  YOU COULD REALLY FUCK UP YOUR SESSION WITH THIS!
--  NO SUPPORT is offered
--
--@changelog
--  v1.0 - nothing to report
--  v1.1 - Remembers window position.  
--         Adjusted font in text editor to make Larger
--         Thank you SOLGER for the code updates
--  v2.0 - Added Support For Entire Project Chunk
--         GUI updates
--  v2.1 - Small Bug Fix on Set Chunk Timeline Refresh

function Msg(param) reaper.ShowConsoleMsg(tostring(param).."\n") end


local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()

reaper.atexit(function ()     --thank you Solger
  GUI.save_window_state(GUI.name)
end)


local safe = false

function Cancel()
GUI.elms.CHUNK:close()

end--Cancel()

function Proceed()
safe = true
GUI.elms.CHUNK:close()

end--Proceed()

function Error()
GUI.elms.ERROR:close()
end--Error()





function GetChunk()
    
    if GUI.Val("Menubox1") == 1 then
            local track = reaper.GetSelectedTrack(0,0)
            if track then
                  local _, str = reaper.GetTrackStateChunk(track, "", false )
                  GUI.Val("TextEditor1", str )
            else
                  GUI.Val("MSG", "NO TRACK SELECTED" )
                  GUI.elms.ERROR:open()
                  GUI.Val("TextEditor1", "" )
            end--if
          
    elseif GUI.Val("Menubox1") == 2 then
            local item = reaper.GetSelectedMediaItem(0,0)
            if item then
                  local _, str = reaper.GetItemStateChunk(item, "", false )
                  GUI.Val("TextEditor1", str )
            else
                  GUI.Val("MSG", "NO ITEM SELECTED" )
                  GUI.elms.ERROR:open()
                  GUI.Val("TextEditor1", "" )
            end--if
    
    elseif GUI.Val("Menubox1") == 3 then   
            local env =  reaper.GetSelectedEnvelope(0)
            if env then
                    local _, str = reaper.GetEnvelopeStateChunk( env, "", false )
                    GUI.Val("TextEditor1", str )
            else
                  GUI.Val("MSG", "NO ENVELOPE SELECTED" )
                  GUI.elms.ERROR:open()
                  GUI.Val("TextEditor1", "" )      
            end--if
    elseif GUI.Val("Menubox1") == 4 then 
            reaper.Main_SaveProject( 0, false )
            local _, projfn = reaper.EnumProjects( -1 )
            local file = io.open(projfn, "r") -- open in read mode
            io.input(file)
            GUI.Val( "TextEditor1", io.read("a") )
            io.close(file)
    end--if

end--GetChunk()


function SetChunk()

    reaper.Undo_BeginBlock()
    local chunk = GUI.Val("TextEditor1")
    
        if GUI.Val("Menubox1") == 1 then
                local track = reaper.GetSelectedTrack(0,0)
                if track then
                      reaper.SetTrackStateChunk( track, GUI.Val("TextEditor1"), false )
                end--if
              
        elseif GUI.Val("Menubox1") == 2 then
                local item = reaper.GetSelectedMediaItem(0,0)
                if item then
                      reaper.SetItemStateChunk( item, GUI.Val("TextEditor1"), false )
                end--if
        
        elseif GUI.Val("Menubox1") == 3 then   
                local env =  reaper.GetSelectedEnvelope(0)
                if env then
                        reaper.SetEnvelopeStateChunk( env, GUI.Val("TextEditor1"), false )       
                end--if
        elseif GUI.Val("Menubox1") == 4 then
                text = GUI.Val("TextEditor1")
                if text == "" then return end --GetChunk() end
                
                GUI.elms.CHUNK:open()
                
        end--if
        
    reaper.UpdateTimeline()
    reaper.TrackList_AdjustWindows(0)
end--SetChunk()




GUI.req("Classes/Class - Menubar.lua")()
GUI.req("Classes/Class - TextEditor.lua")()
GUI.req("Classes/Class - Button.lua")()
GUI.req("Classes/Class - Menubox.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Window.lua")()
GUI.req("Classes/Class - Label.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end


GUI.name = "TJF CHUNK EDITOR"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 1000, 600
GUI.anchor, GUI.corner = "mouse", "C"

GUI.load_window_state(GUI.name) -- Thank you Solger


local fonts = GUI.get_OS_fonts()
GUI.fonts.monospace = {fonts.mono, 18} -- default value for monospace is 14pt



GUI.New("TextEditor1", "TextEditor", {
    z = 11,
    x = 0.0,
    y = 25.0,
    w = 1000,
    h = 575,
    caption = "",
    font_a = 3,
    font_b = "monospace",
    color = "txt",
    col_fill = "elm_frame",
    cap_bg = "wnd_bg",
    bg = "elm_bg",
    shadow = true,
    pad = 4,
    undo_limit = 24
})

GUI.New("Button2", "Button", {
    z = 11,
    x = 775.0,
    y = 0.0,
    w = 95,
    h = 25,
    caption = "Set Chunk",
    font = 2,
    col_txt = "txt",
    col_fill = "elm_bg",
    func = SetChunk
})

GUI.New("Button1", "Button", {
    z = 11,
    x = 675.0,
    y = 0.0,
    w = 95,
    h = 25,
    caption = "Get Chunk",
    font = 2,
    col_txt = "txt",
    col_fill = "elm_bg",
    func = GetChunk
})

GUI.New("Menubox1", "Menubox", {
    z = 11,
    x = 875.0,
    y = 0.0,
    w = 125,
    h = 25,
    caption = "",
    optarray = {"  Track", "  Item", "  Envelope","  Project" },
    retval = 1,
    font_a = 3,
    font_b = 2,
    col_txt = "txt",
    col_cap = "txt",
    bg = "wnd_bg",
    pad = 4,
    noarrow = false,
    align = 0
})




GUI.New("Menubar1", "Menubar", {
    z = 12.0,
    x = 0,
    y = 0,
    w = 1585.0,
    h = 25,
    menus = {{title = "", options = {}}},
    font = 2,
    col_txt = "txt",
    col_bg = "elm_frame",
    col_over = "elm_fill",
    fullwidth = true
})

GUI.New("Warning", "Label", {
    z = 5,
    x = 10,
    y = 604,
    caption = "",
    --caption = "Editing Chunks is Dangerous... USE AT YOUR OWN RISK!",
    font = 3,
    color = "elm_frame",
    bg = "wnd_bg",
    shadow = false
})



------------------------------------
-------- Subwindow and -------------
-------- its elements  -------------
------------------------------------


GUI.New("ERROR", "Window", 4, 0, 0, 475, 200, "ERROR!!", {3,4})

GUI.New("OK", "Button", {
    z = 3,
    x = 212.5,
    y = 120,
    w = 100,
    h = 30,
    caption = "OK",
    font = 2,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = Error
})


GUI.New("MSG", "Label", {
    z = 3,
    x = 0,
    y = 50,
    caption = "NO TRACK SELECTED",
    font = 1,
    color = "txt",
    bg = "wnd_bg",
    shadow = false
})



function GUI.elms.ERROR:onopen()

    -- :adjustelm places the element's specified x,y coordinates relative to
    -- the Window. i.e. creating an element at 0,0 and adjusting it will put
    -- the element in the Window's top-left corner.
    self:adjustelm(GUI.elms.OK)
    self:adjustelm(GUI.elms.MSG)

    -- Buttons look nice when they're centered.
    GUI.elms.OK.x, _ = GUI.center(GUI.elms.OK, self)
    GUI.elms.MSG.x, _ = GUI.center(GUI.elms.MSG, self)

end










GUI.New("CHUNK", "Window", 2, 0, 0, 475, 200, "SET PROJECT CHUNK", {1,2})

GUI.New("PROCEED", "Button", {
    z = 1,
    x = 212.5,
    y = 137,
    w = 100,
    h = 30,
    caption = "PROCEED",
    font = 2,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = Proceed
})

GUI.New("CANCEL", "Button", {
    z = 1,
    x = 337.5,
    y = 137,
    w = 100,
    h = 30,
    caption = "CANCEL",
    font = 2,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = Cancel
})




GUI.New("Radio1", "Radio", {
    z = 1,
    x = 300,
    y = 265,
    w = 400,
    h = 97,
    caption = "DANGER!! This is NOT Undoable",
    optarray = {"OVERWRITE Current Project", "INCREMENT Project Name", "SAVE AS NEW Project Name"},
    dir = "v",
    font_a = 2,
    font_b = 2,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = true,
    shadow = true,
    swap = false,
    opt_size = 20
})





-- We want these elements out of the way until the window is opened
GUI.elms_hide[1] = true
GUI.elms_hide[2] = true
GUI.elms_hide[3] = true
GUI.elms_hide[4] = true


-- :onopen is a hook provided by the Window class. This function will be run
-- every time the window opens.

function GUI.elms.CHUNK:onopen()

    self:adjustelm(GUI.elms.PROCEED)
    self:adjustelm(GUI.elms.CANCEL)
    safe = false

end

function GUI.elms.CHUNK:onclose()
                    

                    if safe then
                    
                        if GUI.Val("Radio1") == 1 then
                            reaper.Main_SaveProject( -1, false )
                            
                        elseif GUI.Val("Radio1") == 2 then
                            reaper.Main_OnCommand(41895 ,0) --File: Save new version of project (automatically increment project name)
                        
                        elseif GUI.Val("Radio1") == 3 then
                            reaper.Main_SaveProject( -1, true )

                        end
                          
                          local _, projfn = reaper.EnumProjects( -1 )
                          local file = io.open(projfn, "w") -- open in WRITE mode
                          io.output(file)
                          io.write(text)
                          io.close(file)
                          reaper.Main_openProject( projfn )
                    end--if
end



GUI.Init()
GUI.Main()
